{
  "metadata": {
    "anaconda-cloud": {},
    "kernelspec": {
      "name": "python",
      "display_name": "Pyolite",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "toc-showcode": true,
    "toc-autonumbering": true
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<center>\n    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Module%203/images/IDSNlogo.png\" width=\"300\" alt=\"cognitiveclass.ai logo\"  />\n</center>\n\n# Data Analysis with Python\n\nEstimated time needed: **30** minutes\n\n## Objectives\n\nПосле завершения лабораторной рабоы вы сможете:\n\n*   Исследуйте функции или характеристики, чтобы предсказать цену автомобиля\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Table of Contents</h2>\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n<ol>\n    <li><a href=\"https://#import_data\">Import Data from Module</a></li>\n    <li><a href=\"https://#pattern_visualization\">Analyzing Individual Feature Patterns using Visualization</a></li>\n    <li><a href=\"https://#discriptive_statistics\">Descriptive Statistical Analysis</a></li>\n    <li><a href=\"https://#basic_grouping\">Basics of Grouping</a></li>\n    <li><a href=\"https://#correlation_causation\">Correlation and Causation</a></li>\n    <li><a href=\"https://#anova\">ANOVA</a></li>\n</ol>\n\n</div>\n\n<hr>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>What are the main characteristics that have the most impact on the car price?</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"import_data\">1. Import Data from Module 2</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Setup</h4>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "you are running the lab in your  browser, so we will install the libraries using `piplite`\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#you are running the lab in your  browser, so we will install the libraries using ``piplite``\nimport piplite\nawait piplite.install(['pandas'])\nawait piplite.install(['matplotlib'])\nawait piplite.install(['scipy'])\nawait piplite.install(['seaborn'])\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Import libraries:\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "If you run the lab locally using Anaconda, you can load the correct library and versions by uncommenting the following:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#If you run the lab locally using Anaconda, you can load the correct library and versions by uncommenting the following:\n#install specific version of libraries used in lab\n#! mamba install pandas==1.3.3\n#! mamba install numpy=1.21.2\n#! mamba install scipy=1.7.1-y\n#!  mamba install seaborn=0.9.0-y",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd\nimport numpy as np",
      "metadata": {
        "trusted": true
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "This function will download the dataset into your browser\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#This function will download the dataset into your browser \n\nfrom pyodide.http import pyfetch\n\nasync def download(url, filename):\n    response = await pyfetch(url)\n    if response.status == 200:\n        with open(filename, \"wb\") as f:\n            f.write(await response.bytes())\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Load the data and store it in dataframe `df`:\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "This dataset was hosted on IBM Cloud object. Click <a href=\"https://cocl.us/DA101EN_object_storage?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\">HERE</a> for free storage.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "path='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/automobileEDA.csv'",
      "metadata": {
        "trusted": true
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "you will need to download the dataset; if you are running locally, please comment out the following\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "\\#you will need to download the dataset; if you are running locally, please comment out the following\nawait download(path, \"auto.csv\")\npath=\"auto.csv\"\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "await download(path, \"auto.csv\")\nfilename=\"auto.csv\"",
      "metadata": {
        "trusted": true
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "\ndf = pd.read_csv(filename)\ndf.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 7,
      "outputs": [
        {
          "execution_count": 7,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   symboling  normalized-losses         make aspiration num-of-doors  \\\n0          3                122  alfa-romero        std          two   \n1          3                122  alfa-romero        std          two   \n2          1                122  alfa-romero        std          two   \n3          2                164         audi        std         four   \n4          2                164         audi        std         four   \n\n    body-style drive-wheels engine-location  wheel-base    length  ...  \\\n0  convertible          rwd           front        88.6  0.811148  ...   \n1  convertible          rwd           front        88.6  0.811148  ...   \n2    hatchback          rwd           front        94.5  0.822681  ...   \n3        sedan          fwd           front        99.8  0.848630  ...   \n4        sedan          4wd           front        99.4  0.848630  ...   \n\n   compression-ratio  horsepower  peak-rpm city-mpg highway-mpg    price  \\\n0                9.0       111.0    5000.0       21          27  13495.0   \n1                9.0       111.0    5000.0       21          27  16500.0   \n2                9.0       154.0    5000.0       19          26  16500.0   \n3               10.0       102.0    5500.0       24          30  13950.0   \n4                8.0       115.0    5500.0       18          22  17450.0   \n\n  city-L/100km  horsepower-binned  diesel  gas  \n0    11.190476             Medium       0    1  \n1    11.190476             Medium       0    1  \n2    12.368421             Medium       0    1  \n3     9.791667             Medium       0    1  \n4    13.055556             Medium       0    1  \n\n[5 rows x 29 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>make</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>...</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n      <th>city-L/100km</th>\n      <th>horsepower-binned</th>\n      <th>diesel</th>\n      <th>gas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>122</td>\n      <td>alfa-romero</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>0.811148</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>111.0</td>\n      <td>5000.0</td>\n      <td>21</td>\n      <td>27</td>\n      <td>13495.0</td>\n      <td>11.190476</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>122</td>\n      <td>alfa-romero</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>0.811148</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>111.0</td>\n      <td>5000.0</td>\n      <td>21</td>\n      <td>27</td>\n      <td>16500.0</td>\n      <td>11.190476</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>122</td>\n      <td>alfa-romero</td>\n      <td>std</td>\n      <td>two</td>\n      <td>hatchback</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>94.5</td>\n      <td>0.822681</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>154.0</td>\n      <td>5000.0</td>\n      <td>19</td>\n      <td>26</td>\n      <td>16500.0</td>\n      <td>12.368421</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>99.8</td>\n      <td>0.848630</td>\n      <td>...</td>\n      <td>10.0</td>\n      <td>102.0</td>\n      <td>5500.0</td>\n      <td>24</td>\n      <td>30</td>\n      <td>13950.0</td>\n      <td>9.791667</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>4wd</td>\n      <td>front</td>\n      <td>99.4</td>\n      <td>0.848630</td>\n      <td>...</td>\n      <td>8.0</td>\n      <td>115.0</td>\n      <td>5500.0</td>\n      <td>18</td>\n      <td>22</td>\n      <td>17450.0</td>\n      <td>13.055556</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 29 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"pattern_visualization\">2. Analyzing Individual Feature Patterns Using Visualization</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "To install Seaborn we use pip, the Python package manager.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Import visualization packages \"Matplotlib\" and \"Seaborn\". Don't forget about \"%matplotlib inline\" to plot in a Jupyter notebook.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>How to choose the right visualization method?</h4>\n<p>When visualizing individual variables, it is important to first understand what type of variable you are dealing with. This will help us find the right visualization method for that variable.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# list the data types for each column\nprint(df.dtypes)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 10,
      "outputs": [
        {
          "name": "stdout",
          "text": "symboling              int64\nnormalized-losses      int64\nmake                  object\naspiration            object\nnum-of-doors          object\nbody-style            object\ndrive-wheels          object\nengine-location       object\nwheel-base           float64\nlength               float64\nwidth                float64\nheight               float64\ncurb-weight            int64\nengine-type           object\nnum-of-cylinders      object\nengine-size            int64\nfuel-system           object\nbore                 float64\nstroke               float64\ncompression-ratio    float64\nhorsepower           float64\npeak-rpm             float64\ncity-mpg               int64\nhighway-mpg            int64\nprice                float64\ncity-L/100km         float64\nhorsepower-binned     object\ndiesel                 int64\ngas                    int64\ndtype: object\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h3>Question  #1:</h3>\n\n<b>What is the data type of the column \"peak-rpm\"? </b>\n\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute \ndf.dtypes[\"peak-rpm\"]",
      "metadata": {
        "trusted": true
      },
      "execution_count": 11,
      "outputs": [
        {
          "execution_count": 11,
          "output_type": "execute_result",
          "data": {
            "text/plain": "dtype('float64')"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\ndf['peak-rpm'].dtypes\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "For example, we can calculate the correlation between variables  of type \"int64\" or \"float64\" using the method \"corr\":\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 12,
      "outputs": [
        {
          "execution_count": 12,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                   symboling  normalized-losses  wheel-base    length  \\\nsymboling           1.000000           0.466264   -0.535987 -0.365404   \nnormalized-losses   0.466264           1.000000   -0.056661  0.019424   \nwheel-base         -0.535987          -0.056661    1.000000  0.876024   \nlength             -0.365404           0.019424    0.876024  1.000000   \nwidth              -0.242423           0.086802    0.814507  0.857170   \nheight             -0.550160          -0.373737    0.590742  0.492063   \ncurb-weight        -0.233118           0.099404    0.782097  0.880665   \nengine-size        -0.110581           0.112360    0.572027  0.685025   \nbore               -0.140019          -0.029862    0.493244  0.608971   \nstroke             -0.008245           0.055563    0.158502  0.124139   \ncompression-ratio  -0.182196          -0.114713    0.250313  0.159733   \nhorsepower          0.075819           0.217299    0.371147  0.579821   \npeak-rpm            0.279740           0.239543   -0.360305 -0.285970   \ncity-mpg           -0.035527          -0.225016   -0.470606 -0.665192   \nhighway-mpg         0.036233          -0.181877   -0.543304 -0.698142   \nprice              -0.082391           0.133999    0.584642  0.690628   \ncity-L/100km        0.066171           0.238567    0.476153  0.657373   \ndiesel             -0.196735          -0.101546    0.307237  0.211187   \ngas                 0.196735           0.101546   -0.307237 -0.211187   \n\n                      width    height  curb-weight  engine-size      bore  \\\nsymboling         -0.242423 -0.550160    -0.233118    -0.110581 -0.140019   \nnormalized-losses  0.086802 -0.373737     0.099404     0.112360 -0.029862   \nwheel-base         0.814507  0.590742     0.782097     0.572027  0.493244   \nlength             0.857170  0.492063     0.880665     0.685025  0.608971   \nwidth              1.000000  0.306002     0.866201     0.729436  0.544885   \nheight             0.306002  1.000000     0.307581     0.074694  0.180449   \ncurb-weight        0.866201  0.307581     1.000000     0.849072  0.644060   \nengine-size        0.729436  0.074694     0.849072     1.000000  0.572609   \nbore               0.544885  0.180449     0.644060     0.572609  1.000000   \nstroke             0.188829 -0.062704     0.167562     0.209523 -0.055390   \ncompression-ratio  0.189867  0.259737     0.156433     0.028889  0.001263   \nhorsepower         0.615077 -0.087027     0.757976     0.822676  0.566936   \npeak-rpm          -0.245800 -0.309974    -0.279361    -0.256733 -0.267392   \ncity-mpg          -0.633531 -0.049800    -0.749543    -0.650546 -0.582027   \nhighway-mpg       -0.680635 -0.104812    -0.794889    -0.679571 -0.591309   \nprice              0.751265  0.135486     0.834415     0.872335  0.543155   \ncity-L/100km       0.673363  0.003811     0.785353     0.745059  0.554610   \ndiesel             0.244356  0.281578     0.221046     0.070779  0.054458   \ngas               -0.244356 -0.281578    -0.221046    -0.070779 -0.054458   \n\n                     stroke  compression-ratio  horsepower  peak-rpm  \\\nsymboling         -0.008245          -0.182196    0.075819  0.279740   \nnormalized-losses  0.055563          -0.114713    0.217299  0.239543   \nwheel-base         0.158502           0.250313    0.371147 -0.360305   \nlength             0.124139           0.159733    0.579821 -0.285970   \nwidth              0.188829           0.189867    0.615077 -0.245800   \nheight            -0.062704           0.259737   -0.087027 -0.309974   \ncurb-weight        0.167562           0.156433    0.757976 -0.279361   \nengine-size        0.209523           0.028889    0.822676 -0.256733   \nbore              -0.055390           0.001263    0.566936 -0.267392   \nstroke             1.000000           0.187923    0.098462 -0.065713   \ncompression-ratio  0.187923           1.000000   -0.214514 -0.435780   \nhorsepower         0.098462          -0.214514    1.000000  0.107885   \npeak-rpm          -0.065713          -0.435780    0.107885  1.000000   \ncity-mpg          -0.034696           0.331425   -0.822214 -0.115413   \nhighway-mpg       -0.035201           0.268465   -0.804575 -0.058598   \nprice              0.082310           0.071107    0.809575 -0.101616   \ncity-L/100km       0.037300          -0.299372    0.889488  0.115830   \ndiesel             0.241303           0.985231   -0.169053 -0.475812   \ngas               -0.241303          -0.985231    0.169053  0.475812   \n\n                   city-mpg  highway-mpg     price  city-L/100km    diesel  \\\nsymboling         -0.035527     0.036233 -0.082391      0.066171 -0.196735   \nnormalized-losses -0.225016    -0.181877  0.133999      0.238567 -0.101546   \nwheel-base        -0.470606    -0.543304  0.584642      0.476153  0.307237   \nlength            -0.665192    -0.698142  0.690628      0.657373  0.211187   \nwidth             -0.633531    -0.680635  0.751265      0.673363  0.244356   \nheight            -0.049800    -0.104812  0.135486      0.003811  0.281578   \ncurb-weight       -0.749543    -0.794889  0.834415      0.785353  0.221046   \nengine-size       -0.650546    -0.679571  0.872335      0.745059  0.070779   \nbore              -0.582027    -0.591309  0.543155      0.554610  0.054458   \nstroke            -0.034696    -0.035201  0.082310      0.037300  0.241303   \ncompression-ratio  0.331425     0.268465  0.071107     -0.299372  0.985231   \nhorsepower        -0.822214    -0.804575  0.809575      0.889488 -0.169053   \npeak-rpm          -0.115413    -0.058598 -0.101616      0.115830 -0.475812   \ncity-mpg           1.000000     0.972044 -0.686571     -0.949713  0.265676   \nhighway-mpg        0.972044     1.000000 -0.704692     -0.930028  0.198690   \nprice             -0.686571    -0.704692  1.000000      0.789898  0.110326   \ncity-L/100km      -0.949713    -0.930028  0.789898      1.000000 -0.241282   \ndiesel             0.265676     0.198690  0.110326     -0.241282  1.000000   \ngas               -0.265676    -0.198690 -0.110326      0.241282 -1.000000   \n\n                        gas  \nsymboling          0.196735  \nnormalized-losses  0.101546  \nwheel-base        -0.307237  \nlength            -0.211187  \nwidth             -0.244356  \nheight            -0.281578  \ncurb-weight       -0.221046  \nengine-size       -0.070779  \nbore              -0.054458  \nstroke            -0.241303  \ncompression-ratio -0.985231  \nhorsepower         0.169053  \npeak-rpm           0.475812  \ncity-mpg          -0.265676  \nhighway-mpg       -0.198690  \nprice             -0.110326  \ncity-L/100km       0.241282  \ndiesel            -1.000000  \ngas                1.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n      <th>city-L/100km</th>\n      <th>diesel</th>\n      <th>gas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>symboling</th>\n      <td>1.000000</td>\n      <td>0.466264</td>\n      <td>-0.535987</td>\n      <td>-0.365404</td>\n      <td>-0.242423</td>\n      <td>-0.550160</td>\n      <td>-0.233118</td>\n      <td>-0.110581</td>\n      <td>-0.140019</td>\n      <td>-0.008245</td>\n      <td>-0.182196</td>\n      <td>0.075819</td>\n      <td>0.279740</td>\n      <td>-0.035527</td>\n      <td>0.036233</td>\n      <td>-0.082391</td>\n      <td>0.066171</td>\n      <td>-0.196735</td>\n      <td>0.196735</td>\n    </tr>\n    <tr>\n      <th>normalized-losses</th>\n      <td>0.466264</td>\n      <td>1.000000</td>\n      <td>-0.056661</td>\n      <td>0.019424</td>\n      <td>0.086802</td>\n      <td>-0.373737</td>\n      <td>0.099404</td>\n      <td>0.112360</td>\n      <td>-0.029862</td>\n      <td>0.055563</td>\n      <td>-0.114713</td>\n      <td>0.217299</td>\n      <td>0.239543</td>\n      <td>-0.225016</td>\n      <td>-0.181877</td>\n      <td>0.133999</td>\n      <td>0.238567</td>\n      <td>-0.101546</td>\n      <td>0.101546</td>\n    </tr>\n    <tr>\n      <th>wheel-base</th>\n      <td>-0.535987</td>\n      <td>-0.056661</td>\n      <td>1.000000</td>\n      <td>0.876024</td>\n      <td>0.814507</td>\n      <td>0.590742</td>\n      <td>0.782097</td>\n      <td>0.572027</td>\n      <td>0.493244</td>\n      <td>0.158502</td>\n      <td>0.250313</td>\n      <td>0.371147</td>\n      <td>-0.360305</td>\n      <td>-0.470606</td>\n      <td>-0.543304</td>\n      <td>0.584642</td>\n      <td>0.476153</td>\n      <td>0.307237</td>\n      <td>-0.307237</td>\n    </tr>\n    <tr>\n      <th>length</th>\n      <td>-0.365404</td>\n      <td>0.019424</td>\n      <td>0.876024</td>\n      <td>1.000000</td>\n      <td>0.857170</td>\n      <td>0.492063</td>\n      <td>0.880665</td>\n      <td>0.685025</td>\n      <td>0.608971</td>\n      <td>0.124139</td>\n      <td>0.159733</td>\n      <td>0.579821</td>\n      <td>-0.285970</td>\n      <td>-0.665192</td>\n      <td>-0.698142</td>\n      <td>0.690628</td>\n      <td>0.657373</td>\n      <td>0.211187</td>\n      <td>-0.211187</td>\n    </tr>\n    <tr>\n      <th>width</th>\n      <td>-0.242423</td>\n      <td>0.086802</td>\n      <td>0.814507</td>\n      <td>0.857170</td>\n      <td>1.000000</td>\n      <td>0.306002</td>\n      <td>0.866201</td>\n      <td>0.729436</td>\n      <td>0.544885</td>\n      <td>0.188829</td>\n      <td>0.189867</td>\n      <td>0.615077</td>\n      <td>-0.245800</td>\n      <td>-0.633531</td>\n      <td>-0.680635</td>\n      <td>0.751265</td>\n      <td>0.673363</td>\n      <td>0.244356</td>\n      <td>-0.244356</td>\n    </tr>\n    <tr>\n      <th>height</th>\n      <td>-0.550160</td>\n      <td>-0.373737</td>\n      <td>0.590742</td>\n      <td>0.492063</td>\n      <td>0.306002</td>\n      <td>1.000000</td>\n      <td>0.307581</td>\n      <td>0.074694</td>\n      <td>0.180449</td>\n      <td>-0.062704</td>\n      <td>0.259737</td>\n      <td>-0.087027</td>\n      <td>-0.309974</td>\n      <td>-0.049800</td>\n      <td>-0.104812</td>\n      <td>0.135486</td>\n      <td>0.003811</td>\n      <td>0.281578</td>\n      <td>-0.281578</td>\n    </tr>\n    <tr>\n      <th>curb-weight</th>\n      <td>-0.233118</td>\n      <td>0.099404</td>\n      <td>0.782097</td>\n      <td>0.880665</td>\n      <td>0.866201</td>\n      <td>0.307581</td>\n      <td>1.000000</td>\n      <td>0.849072</td>\n      <td>0.644060</td>\n      <td>0.167562</td>\n      <td>0.156433</td>\n      <td>0.757976</td>\n      <td>-0.279361</td>\n      <td>-0.749543</td>\n      <td>-0.794889</td>\n      <td>0.834415</td>\n      <td>0.785353</td>\n      <td>0.221046</td>\n      <td>-0.221046</td>\n    </tr>\n    <tr>\n      <th>engine-size</th>\n      <td>-0.110581</td>\n      <td>0.112360</td>\n      <td>0.572027</td>\n      <td>0.685025</td>\n      <td>0.729436</td>\n      <td>0.074694</td>\n      <td>0.849072</td>\n      <td>1.000000</td>\n      <td>0.572609</td>\n      <td>0.209523</td>\n      <td>0.028889</td>\n      <td>0.822676</td>\n      <td>-0.256733</td>\n      <td>-0.650546</td>\n      <td>-0.679571</td>\n      <td>0.872335</td>\n      <td>0.745059</td>\n      <td>0.070779</td>\n      <td>-0.070779</td>\n    </tr>\n    <tr>\n      <th>bore</th>\n      <td>-0.140019</td>\n      <td>-0.029862</td>\n      <td>0.493244</td>\n      <td>0.608971</td>\n      <td>0.544885</td>\n      <td>0.180449</td>\n      <td>0.644060</td>\n      <td>0.572609</td>\n      <td>1.000000</td>\n      <td>-0.055390</td>\n      <td>0.001263</td>\n      <td>0.566936</td>\n      <td>-0.267392</td>\n      <td>-0.582027</td>\n      <td>-0.591309</td>\n      <td>0.543155</td>\n      <td>0.554610</td>\n      <td>0.054458</td>\n      <td>-0.054458</td>\n    </tr>\n    <tr>\n      <th>stroke</th>\n      <td>-0.008245</td>\n      <td>0.055563</td>\n      <td>0.158502</td>\n      <td>0.124139</td>\n      <td>0.188829</td>\n      <td>-0.062704</td>\n      <td>0.167562</td>\n      <td>0.209523</td>\n      <td>-0.055390</td>\n      <td>1.000000</td>\n      <td>0.187923</td>\n      <td>0.098462</td>\n      <td>-0.065713</td>\n      <td>-0.034696</td>\n      <td>-0.035201</td>\n      <td>0.082310</td>\n      <td>0.037300</td>\n      <td>0.241303</td>\n      <td>-0.241303</td>\n    </tr>\n    <tr>\n      <th>compression-ratio</th>\n      <td>-0.182196</td>\n      <td>-0.114713</td>\n      <td>0.250313</td>\n      <td>0.159733</td>\n      <td>0.189867</td>\n      <td>0.259737</td>\n      <td>0.156433</td>\n      <td>0.028889</td>\n      <td>0.001263</td>\n      <td>0.187923</td>\n      <td>1.000000</td>\n      <td>-0.214514</td>\n      <td>-0.435780</td>\n      <td>0.331425</td>\n      <td>0.268465</td>\n      <td>0.071107</td>\n      <td>-0.299372</td>\n      <td>0.985231</td>\n      <td>-0.985231</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>0.075819</td>\n      <td>0.217299</td>\n      <td>0.371147</td>\n      <td>0.579821</td>\n      <td>0.615077</td>\n      <td>-0.087027</td>\n      <td>0.757976</td>\n      <td>0.822676</td>\n      <td>0.566936</td>\n      <td>0.098462</td>\n      <td>-0.214514</td>\n      <td>1.000000</td>\n      <td>0.107885</td>\n      <td>-0.822214</td>\n      <td>-0.804575</td>\n      <td>0.809575</td>\n      <td>0.889488</td>\n      <td>-0.169053</td>\n      <td>0.169053</td>\n    </tr>\n    <tr>\n      <th>peak-rpm</th>\n      <td>0.279740</td>\n      <td>0.239543</td>\n      <td>-0.360305</td>\n      <td>-0.285970</td>\n      <td>-0.245800</td>\n      <td>-0.309974</td>\n      <td>-0.279361</td>\n      <td>-0.256733</td>\n      <td>-0.267392</td>\n      <td>-0.065713</td>\n      <td>-0.435780</td>\n      <td>0.107885</td>\n      <td>1.000000</td>\n      <td>-0.115413</td>\n      <td>-0.058598</td>\n      <td>-0.101616</td>\n      <td>0.115830</td>\n      <td>-0.475812</td>\n      <td>0.475812</td>\n    </tr>\n    <tr>\n      <th>city-mpg</th>\n      <td>-0.035527</td>\n      <td>-0.225016</td>\n      <td>-0.470606</td>\n      <td>-0.665192</td>\n      <td>-0.633531</td>\n      <td>-0.049800</td>\n      <td>-0.749543</td>\n      <td>-0.650546</td>\n      <td>-0.582027</td>\n      <td>-0.034696</td>\n      <td>0.331425</td>\n      <td>-0.822214</td>\n      <td>-0.115413</td>\n      <td>1.000000</td>\n      <td>0.972044</td>\n      <td>-0.686571</td>\n      <td>-0.949713</td>\n      <td>0.265676</td>\n      <td>-0.265676</td>\n    </tr>\n    <tr>\n      <th>highway-mpg</th>\n      <td>0.036233</td>\n      <td>-0.181877</td>\n      <td>-0.543304</td>\n      <td>-0.698142</td>\n      <td>-0.680635</td>\n      <td>-0.104812</td>\n      <td>-0.794889</td>\n      <td>-0.679571</td>\n      <td>-0.591309</td>\n      <td>-0.035201</td>\n      <td>0.268465</td>\n      <td>-0.804575</td>\n      <td>-0.058598</td>\n      <td>0.972044</td>\n      <td>1.000000</td>\n      <td>-0.704692</td>\n      <td>-0.930028</td>\n      <td>0.198690</td>\n      <td>-0.198690</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>-0.082391</td>\n      <td>0.133999</td>\n      <td>0.584642</td>\n      <td>0.690628</td>\n      <td>0.751265</td>\n      <td>0.135486</td>\n      <td>0.834415</td>\n      <td>0.872335</td>\n      <td>0.543155</td>\n      <td>0.082310</td>\n      <td>0.071107</td>\n      <td>0.809575</td>\n      <td>-0.101616</td>\n      <td>-0.686571</td>\n      <td>-0.704692</td>\n      <td>1.000000</td>\n      <td>0.789898</td>\n      <td>0.110326</td>\n      <td>-0.110326</td>\n    </tr>\n    <tr>\n      <th>city-L/100km</th>\n      <td>0.066171</td>\n      <td>0.238567</td>\n      <td>0.476153</td>\n      <td>0.657373</td>\n      <td>0.673363</td>\n      <td>0.003811</td>\n      <td>0.785353</td>\n      <td>0.745059</td>\n      <td>0.554610</td>\n      <td>0.037300</td>\n      <td>-0.299372</td>\n      <td>0.889488</td>\n      <td>0.115830</td>\n      <td>-0.949713</td>\n      <td>-0.930028</td>\n      <td>0.789898</td>\n      <td>1.000000</td>\n      <td>-0.241282</td>\n      <td>0.241282</td>\n    </tr>\n    <tr>\n      <th>diesel</th>\n      <td>-0.196735</td>\n      <td>-0.101546</td>\n      <td>0.307237</td>\n      <td>0.211187</td>\n      <td>0.244356</td>\n      <td>0.281578</td>\n      <td>0.221046</td>\n      <td>0.070779</td>\n      <td>0.054458</td>\n      <td>0.241303</td>\n      <td>0.985231</td>\n      <td>-0.169053</td>\n      <td>-0.475812</td>\n      <td>0.265676</td>\n      <td>0.198690</td>\n      <td>0.110326</td>\n      <td>-0.241282</td>\n      <td>1.000000</td>\n      <td>-1.000000</td>\n    </tr>\n    <tr>\n      <th>gas</th>\n      <td>0.196735</td>\n      <td>0.101546</td>\n      <td>-0.307237</td>\n      <td>-0.211187</td>\n      <td>-0.244356</td>\n      <td>-0.281578</td>\n      <td>-0.221046</td>\n      <td>-0.070779</td>\n      <td>-0.054458</td>\n      <td>-0.241303</td>\n      <td>-0.985231</td>\n      <td>0.169053</td>\n      <td>0.475812</td>\n      <td>-0.265676</td>\n      <td>-0.198690</td>\n      <td>-0.110326</td>\n      <td>0.241282</td>\n      <td>-1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "The diagonal elements are always one; we will study correlation more precisely Pearson correlation in-depth at the end of the notebook.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h3> Question  #2: </h3>\n\n<p>Find the correlation between the following columns: bore, stroke, compression-ratio, and horsepower.</p>\n<p>Hint: if you would like to select those columns, use the following syntax: df[['bore','stroke','compression-ratio','horsepower']]</p>\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute \ndf[['bore','stroke','compression-ratio','horsepower']].corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 17,
      "outputs": [
        {
          "execution_count": 17,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                       bore    stroke  compression-ratio  horsepower\nbore               1.000000 -0.055390           0.001263    0.566936\nstroke            -0.055390  1.000000           0.187923    0.098462\ncompression-ratio  0.001263  0.187923           1.000000   -0.214514\nhorsepower         0.566936  0.098462          -0.214514    1.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>bore</th>\n      <td>1.000000</td>\n      <td>-0.055390</td>\n      <td>0.001263</td>\n      <td>0.566936</td>\n    </tr>\n    <tr>\n      <th>stroke</th>\n      <td>-0.055390</td>\n      <td>1.000000</td>\n      <td>0.187923</td>\n      <td>0.098462</td>\n    </tr>\n    <tr>\n      <th>compression-ratio</th>\n      <td>0.001263</td>\n      <td>0.187923</td>\n      <td>1.000000</td>\n      <td>-0.214514</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>0.566936</td>\n      <td>0.098462</td>\n      <td>-0.214514</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\ndf[['bore', 'stroke', 'compression-ratio', 'horsepower']].corr()\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Continuous Numerical Variables:</h2> \n\n<p>Continuous numerical variables are variables that may contain any value within some range. They can be of type \"int64\" or \"float64\". A great way to visualize these variables is by using scatterplots with fitted lines.</p>\n\n<p>In order to start understanding the (linear) relationship between an individual variable and the price, we can use \"regplot\" which plots the scatterplot plus the fitted regression line for the data.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's see several examples of different linear relationships:\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Positive Linear Relationship</h4>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's find the scatterplot of \"engine-size\" and \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Engine size as potential predictor variable of price\nsns.regplot(x=\"engine-size\", y=\"price\", data=df)\nplt.ylim(0,)",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 18,
      "outputs": [
        {
          "execution_count": 18,
          "output_type": "execute_result",
          "data": {
            "text/plain": "(0.0, 53058.86937911297)"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>As the engine-size goes up, the price goes up: this indicates a positive direct correlation between these two variables. Engine size seems like a pretty good predictor of price since the regression line is almost a perfect diagonal line.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can examine the correlation between 'engine-size' and 'price' and see that it's approximately 0.87.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df[[\"engine-size\", \"price\"]].corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 19,
      "outputs": [
        {
          "execution_count": 19,
          "output_type": "execute_result",
          "data": {
            "text/plain": "             engine-size     price\nengine-size     1.000000  0.872335\nprice           0.872335  1.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>engine-size</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>engine-size</th>\n      <td>1.000000</td>\n      <td>0.872335</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>0.872335</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Highway mpg is a potential predictor variable of price. Let's find the scatterplot of \"highway-mpg\" and \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.regplot(x=\"highway-mpg\", y=\"price\", data=df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 20,
      "outputs": [
        {
          "execution_count": 20,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='highway-mpg', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>As highway-mpg goes up, the price goes down: this indicates an inverse/negative relationship between these two variables. Highway mpg could potentially be a predictor of price.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can examine the correlation between 'highway-mpg' and 'price' and see it's approximately -0.704.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df[['highway-mpg', 'price']].corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 21,
      "outputs": [
        {
          "execution_count": 21,
          "output_type": "execute_result",
          "data": {
            "text/plain": "             highway-mpg     price\nhighway-mpg     1.000000 -0.704692\nprice          -0.704692  1.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>highway-mpg</th>\n      <td>1.000000</td>\n      <td>-0.704692</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>-0.704692</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Weak Linear Relationship</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's see if \"peak-rpm\" is a predictor variable of \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.regplot(x=\"peak-rpm\", y=\"price\", data=df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 22,
      "outputs": [
        {
          "execution_count": 22,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='peak-rpm', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "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6zdlGxJCCCGEmEBBEyGEEEKICRQ0EUIIIYSYQEETIYQQQogJFDQRQgghhJhAQRMhhBBCiAkUNBFCCCGEmEBBEyGEEEKICRldETzbxOqEBgKBNPeEEEIIIWbFrtv91fumoCmJWltbAQDjx49Pc08IIYQQMlCtra1wuXrf/om2UUkiTdNQX1+PvLw8MEYbkyZTIBDA+PHjcfbsWdqiJgXofKcWne/UovOdWtlwvjnnaG1tRVlZGQSh98wlGmlKIkEQMG7cuHR3Y0RzOp0Z+49uJKLznVp0vlOLzndqZfr57muEKYYSwQkhhBBCTKCgiRBCCCHEBAqaSFawWq343ve+B6vVmu6ujAp0vlOLzndq0flOrZF0vikRnBBCCCHEBBppIoQQQggxgYImQgghhBATKGgihBBCCDGBgiZCCCGEEBMoaCJp8eSTT4Ixhvvuu8+478477wRjLOG2ZMmShN8LhUKoqqpCYWEhHA4HVqxYgcbGxoQ2LS0tWLVqFZxOJ9xuN9asWYNgMJiKl5Uxvv/973c7l9OnTzeOc87x6KOPorS0FDk5OVi4cCFOnTqV8Bh0rs3r73zTezv5zp8/j3/4h39AYWEhcnJyUFFRgQ8//NA4Tu/x5OrvfI+a9zgnJMUOHjzIr7zySj5z5kx+7733GvevXr2aL1myhDc0NBi3lpaWhN/91re+xcePH893797NP/zwQz5//nx+4403JrRZsmQJv/baa/kHH3zA//CHP/ApU6bwb3zjG6l4aRnje9/7Hr/66qsTzuWFCxeM408++SR3uVz8zTff5H/605/4//gf/4NPnDiRd3R0GG3oXJvX3/mm93ZytbS08CuuuILfeeed/MCBA/yzzz7jv/3tb/np06eNNvQeTx4z53u0vMcpaCIp1drayqdOncp37drFb7755m5B06233trr7/p8Pi7LMn/99deN+06cOMEB8Orqas4558ePH+cA+KFDh4w277zzDmeM8fPnzyf99WSq733ve/zaa6/t8Zimadzj8fCnn37auM/n83Gr1cpfeeUV42c61+b1db45p/d2sn33u9/lN910U6/H6T2eXP2db85Hz3ucpudISlVVVWHZsmVYuHBhj8f37t2L4uJiXHXVVVi3bh2am5uNY4cPH4aiKAm/O336dEyYMAHV1dUAgOrqarjdbsydO9dos3DhQgiCgAMHDgzT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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Peak rpm does not seem like a good predictor of the price at all since the regression line is close to horizontal. Also, the data points are very scattered and far from the fitted line, showing lots of variability. Therefore, it's not a reliable variable.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can examine the correlation between 'peak-rpm' and 'price' and see it's approximately -0.101616.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df[['peak-rpm','price']].corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 23,
      "outputs": [
        {
          "execution_count": 23,
          "output_type": "execute_result",
          "data": {
            "text/plain": "          peak-rpm     price\npeak-rpm  1.000000 -0.101616\nprice    -0.101616  1.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>peak-rpm</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>peak-rpm</th>\n      <td>1.000000</td>\n      <td>-0.101616</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>-0.101616</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": " <div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1> Question  3 a): </h1>\n\n<p>Find the correlation  between x=\"stroke\" and y=\"price\".</p>\n<p>Hint: if you would like to select those columns, use the following syntax: df[[\"stroke\",\"price\"]].  </p>\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute\nsns.regplot(x=\"stroke\", y=\"price\", data = df)\ndf[[\"stroke\",\"price\"]].corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 25,
      "outputs": [
        {
          "execution_count": 25,
          "output_type": "execute_result",
          "data": {
            "text/plain": "         stroke    price\nstroke  1.00000  0.08231\nprice   0.08231  1.00000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stroke</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>stroke</th>\n      <td>1.00000</td>\n      <td>0.08231</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>0.08231</td>\n      <td>1.00000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "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KAUMmoiIiIhSwKCJiIiIKAUMmoiIiIhSwKCJiGgYPv74Y0iShEOHDmX6VIhohDFoIqIJ55ZbbsF1112X6dMgojGGQRMRUR8ikUimT4GIsgiDJiIat37729+iqqoKOTk5KCoqwrJly3D33Xdjx44dePHFFyFJEiRJwt69e41ptv/7f/8vlixZApvNhmeeeQaapuHBBx/ElClTYLVaMX/+fLz66qt93qeqqviHf/gHzJ07F42NjQCAF198EZdeeilsNhtmzpyJBx54ANFodLSeBiJKE1OmT4CIaCQ0Nzfja1/7Gh555BFcf/31aG9vxx//+EfcfPPNaGxshM/nw1NPPQUAKCwsRFNTEwDge9/7Hv793/8dl1xyCWw2G37+85/j3//93/HEE0/gkksuwf/5P/8Hf/d3f4fDhw/j/PPPT7jPUCiEr33ta/j444/xxz/+EZMnTzbuc+vWrfjsZz+LhoYG3H777QCAH/zgB6P7pBDRsEhCCJHpkyAiSre//OUvWLBgAT7++GNMnz494dgtt9wCj8eDF154wbju448/xowZM/Czn/0M3/rWt4zrzzvvPNTU1ODee+81rrv88stx2WWX4bHHHjO+749//CP+5V/+BaFQCLt374bD4QAALFu2DEuXLsXmzZuN7//P//xP3HPPPUagRkRjAzNNRDQuXXzxxVi6dCmqqqqwYsUKLF++HF/5ylcwadKkfr9v4cKFxv99Ph+amppw5ZVXJoy58sor8de//jXhuq997WuYMmUK3njjDeTk5BjX//Wvf8Vbb72Ff/3XfzWuU1UVwWAQgUAAubm5w3mYRDSKWNNEROOSoijYs2cPXnnlFVRWVuIXv/gF5syZgxMnTvT7fXl5eUO6v2uvvRbvvfce6urqEq73+/144IEHcOjQIeNSX1+PY8eOwWazDem+iCgzmGkionFLkiRceeWVuPLKK3H//fdj+vTp2LVrFywWC1RVHfD77XY7ysvL8dZbb2HJkiXG9W+99RYuv/zyhLEbNmzARRddhL/7u7/D7373O2P8pZdeiqNHj2L27NnpfXBENOoYNBHRuLR//368/vrrWL58OUpKSrB//36cPn0aFRUVCAaDeO2113D06FEUFRUZ9UfJ3H333fjBD36AWbNmYf78+Xjqqadw6NAhPPPMM73G3nHHHVBVFV/84hfxyiuv4KqrrsL999+PL37xi5g2bRq+8pWvQJZl/PWvf8Xf/vY3/OhHPxrJp4CI0oxBExGNS3a7HW+++SZ+9rOfwefzYfr06fj3f/93rFq1CgsXLsTevXuxcOFC+P1+/OEPf8BnPvOZpLfzz//8z/B6vfj2t7+N1tZWVFZW4v/9v//Xa+VczJ133glN03Dttdfi1VdfxYoVK7B79248+OCD+PGPfwyz2Yy5c+fiG9/4xgg+eiIaCVw9R0RERJQCFoITERERpYBBExEREVEKGDQRERERpYBBExEREVEKGDQRERERpYBBExEREVEKGDQRERERpYBBExEREVEKGDQRERERpYBBExEREVEKGDQRERERpeD/B5amk63EYEYiAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\n\n#The correlation is 0.0823, the non-diagonal elements of the table.\n\ndf[[\"stroke\",\"price\"]].corr()\n\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1>Question  3 b):</h1>\n\n<p>Given the correlation results between \"price\" and \"stroke\", do you expect a linear relationship?</p> \n<p>Verify your results using the function \"regplot()\".</p>\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute \nsns.regplot(x=\"stroke\", y=\"price\", data = df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 26,
      "outputs": [
        {
          "execution_count": 26,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='stroke', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\n\n#There is a weak correlation between the variable 'stroke' and 'price.' as such regression will not work well. We can see this using \"regplot\" to demonstrate this.\n\n#Code: \nsns.regplot(x=\"stroke\", y=\"price\", data=df)\n\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Categorical Variables</h3>\n\n<p>These are variables that describe a 'characteristic' of a data unit, and are selected from a small group of categories. The categorical variables can have the type \"object\" or \"int64\". A good way to visualize categorical variables is by using boxplots.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's look at the relationship between \"body-style\" and \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(x=\"body-style\", y=\"price\", data=df)",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 27,
      "outputs": [
        {
          "execution_count": 27,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='body-style', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>We see that the distributions of price between the different body-style categories have a significant overlap, so body-style would not be a good predictor of price. Let's examine engine \"engine-location\" and \"price\":</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(x=\"engine-location\", y=\"price\", data=df)",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 28,
      "outputs": [
        {
          "execution_count": 28,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='engine-location', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Here we see that the distribution of price between these two engine-location categories, front and rear, are distinct enough to take engine-location as a potential good predictor of price.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's examine \"drive-wheels\" and \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# drive-wheels\nsns.boxplot(x=\"drive-wheels\", y=\"price\", data=df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 29,
      "outputs": [
        {
          "execution_count": 29,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='drive-wheels', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Here we see that the distribution of price between the different drive-wheels categories differs. As such, drive-wheels could potentially be a predictor of price.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"discriptive_statistics\">3. Descriptive Statistical Analysis</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>Let's first take a look at the variables by utilizing a description method.</p>\n\n<p>The <b>describe</b> function automatically computes basic statistics for all continuous variables. Any NaN values are automatically skipped in these statistics.</p>\n\nThis will show:\n\n<ul>\n    <li>the count of that variable</li>\n    <li>the mean</li>\n    <li>the standard deviation (std)</li> \n    <li>the minimum value</li>\n    <li>the IQR (Interquartile Range: 25%, 50% and 75%)</li>\n    <li>the maximum value</li>\n<ul>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can apply the method \"describe\" as follows:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.describe()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 30,
      "outputs": [
        {
          "execution_count": 30,
          "output_type": "execute_result",
          "data": {
            "text/plain": "        symboling  normalized-losses  wheel-base      length       width  \\\ncount  201.000000          201.00000  201.000000  201.000000  201.000000   \nmean     0.840796          122.00000   98.797015    0.837102    0.915126   \nstd      1.254802           31.99625    6.066366    0.059213    0.029187   \nmin     -2.000000           65.00000   86.600000    0.678039    0.837500   \n25%      0.000000          101.00000   94.500000    0.801538    0.890278   \n50%      1.000000          122.00000   97.000000    0.832292    0.909722   \n75%      2.000000          137.00000  102.400000    0.881788    0.925000   \nmax      3.000000          256.00000  120.900000    1.000000    1.000000   \n\n           height  curb-weight  engine-size        bore      stroke  \\\ncount  201.000000   201.000000   201.000000  201.000000  197.000000   \nmean    53.766667  2555.666667   126.875622    3.330692    3.256904   \nstd      2.447822   517.296727    41.546834    0.268072    0.319256   \nmin     47.800000  1488.000000    61.000000    2.540000    2.070000   \n25%     52.000000  2169.000000    98.000000    3.150000    3.110000   \n50%     54.100000  2414.000000   120.000000    3.310000    3.290000   \n75%     55.500000  2926.000000   141.000000    3.580000    3.410000   \nmax     59.800000  4066.000000   326.000000    3.940000    4.170000   \n\n       compression-ratio  horsepower     peak-rpm    city-mpg  highway-mpg  \\\ncount         201.000000  201.000000   201.000000  201.000000   201.000000   \nmean           10.164279  103.405534  5117.665368   25.179104    30.686567   \nstd             4.004965   37.365700   478.113805    6.423220     6.815150   \nmin             7.000000   48.000000  4150.000000   13.000000    16.000000   \n25%             8.600000   70.000000  4800.000000   19.000000    25.000000   \n50%             9.000000   95.000000  5125.369458   24.000000    30.000000   \n75%             9.400000  116.000000  5500.000000   30.000000    34.000000   \nmax            23.000000  262.000000  6600.000000   49.000000    54.000000   \n\n              price  city-L/100km      diesel         gas  \ncount    201.000000    201.000000  201.000000  201.000000  \nmean   13207.129353      9.944145    0.099502    0.900498  \nstd     7947.066342      2.534599    0.300083    0.300083  \nmin     5118.000000      4.795918    0.000000    0.000000  \n25%     7775.000000      7.833333    0.000000    1.000000  \n50%    10295.000000      9.791667    0.000000    1.000000  \n75%    16500.000000     12.368421    0.000000    1.000000  \nmax    45400.000000     18.076923    1.000000    1.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n      <th>city-L/100km</th>\n      <th>diesel</th>\n      <th>gas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>201.000000</td>\n      <td>201.00000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>197.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.840796</td>\n      <td>122.00000</td>\n      <td>98.797015</td>\n      <td>0.837102</td>\n      <td>0.915126</td>\n      <td>53.766667</td>\n      <td>2555.666667</td>\n      <td>126.875622</td>\n      <td>3.330692</td>\n      <td>3.256904</td>\n      <td>10.164279</td>\n      <td>103.405534</td>\n      <td>5117.665368</td>\n      <td>25.179104</td>\n      <td>30.686567</td>\n      <td>13207.129353</td>\n      <td>9.944145</td>\n      <td>0.099502</td>\n      <td>0.900498</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.254802</td>\n      <td>31.99625</td>\n      <td>6.066366</td>\n      <td>0.059213</td>\n      <td>0.029187</td>\n      <td>2.447822</td>\n      <td>517.296727</td>\n      <td>41.546834</td>\n      <td>0.268072</td>\n      <td>0.319256</td>\n      <td>4.004965</td>\n      <td>37.365700</td>\n      <td>478.113805</td>\n      <td>6.423220</td>\n      <td>6.815150</td>\n      <td>7947.066342</td>\n      <td>2.534599</td>\n      <td>0.300083</td>\n      <td>0.300083</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-2.000000</td>\n      <td>65.00000</td>\n      <td>86.600000</td>\n      <td>0.678039</td>\n      <td>0.837500</td>\n      <td>47.800000</td>\n      <td>1488.000000</td>\n      <td>61.000000</td>\n      <td>2.540000</td>\n      <td>2.070000</td>\n      <td>7.000000</td>\n      <td>48.000000</td>\n      <td>4150.000000</td>\n      <td>13.000000</td>\n      <td>16.000000</td>\n      <td>5118.000000</td>\n      <td>4.795918</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>101.00000</td>\n      <td>94.500000</td>\n      <td>0.801538</td>\n      <td>0.890278</td>\n      <td>52.000000</td>\n      <td>2169.000000</td>\n      <td>98.000000</td>\n      <td>3.150000</td>\n      <td>3.110000</td>\n      <td>8.600000</td>\n      <td>70.000000</td>\n      <td>4800.000000</td>\n      <td>19.000000</td>\n      <td>25.000000</td>\n      <td>7775.000000</td>\n      <td>7.833333</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>122.00000</td>\n      <td>97.000000</td>\n      <td>0.832292</td>\n      <td>0.909722</td>\n      <td>54.100000</td>\n      <td>2414.000000</td>\n      <td>120.000000</td>\n      <td>3.310000</td>\n      <td>3.290000</td>\n      <td>9.000000</td>\n      <td>95.000000</td>\n      <td>5125.369458</td>\n      <td>24.000000</td>\n      <td>30.000000</td>\n      <td>10295.000000</td>\n      <td>9.791667</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.000000</td>\n      <td>137.00000</td>\n      <td>102.400000</td>\n      <td>0.881788</td>\n      <td>0.925000</td>\n      <td>55.500000</td>\n      <td>2926.000000</td>\n      <td>141.000000</td>\n      <td>3.580000</td>\n      <td>3.410000</td>\n      <td>9.400000</td>\n      <td>116.000000</td>\n      <td>5500.000000</td>\n      <td>30.000000</td>\n      <td>34.000000</td>\n      <td>16500.000000</td>\n      <td>12.368421</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>256.00000</td>\n      <td>120.900000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>59.800000</td>\n      <td>4066.000000</td>\n      <td>326.000000</td>\n      <td>3.940000</td>\n      <td>4.170000</td>\n      <td>23.000000</td>\n      <td>262.000000</td>\n      <td>6600.000000</td>\n      <td>49.000000</td>\n      <td>54.000000</td>\n      <td>45400.000000</td>\n      <td>18.076923</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "The default setting of \"describe\" skips variables of type object. We can apply the method \"describe\" on the variables of type 'object' as follows:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.describe(include=['object'])",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 31,
      "outputs": [
        {
          "execution_count": 31,
          "output_type": "execute_result",
          "data": {
            "text/plain": "          make aspiration num-of-doors body-style drive-wheels  \\\ncount      201        201          201        201          201   \nunique      22          2            2          5            3   \ntop     toyota        std         four      sedan          fwd   \nfreq        32        165          115         94          118   \n\n       engine-location engine-type num-of-cylinders fuel-system  \\\ncount              201         201              201         201   \nunique               2           6                7           8   \ntop              front         ohc             four        mpfi   \nfreq               198         145              157          92   \n\n       horsepower-binned  \ncount                200  \nunique                 3  \ntop                  Low  \nfreq                 115  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>make</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>engine-type</th>\n      <th>num-of-cylinders</th>\n      <th>fuel-system</th>\n      <th>horsepower-binned</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>200</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>22</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>3</td>\n      <td>2</td>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>toyota</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>ohc</td>\n      <td>four</td>\n      <td>mpfi</td>\n      <td>Low</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>32</td>\n      <td>165</td>\n      <td>115</td>\n      <td>94</td>\n      <td>118</td>\n      <td>198</td>\n      <td>145</td>\n      <td>157</td>\n      <td>92</td>\n      <td>115</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Value Counts</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>Value counts is a good way of understanding how many units of each characteristic/variable we have. We can apply the \"value_counts\" method on the column \"drive-wheels\". Don’t forget the method \"value_counts\" only works on pandas series, not pandas dataframes. As a result, we only include one bracket <code>df['drive-wheels']</code>, not two brackets <code>df[['drive-wheels']]</code>.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df['drive-wheels'].value_counts()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 32,
      "outputs": [
        {
          "execution_count": 32,
          "output_type": "execute_result",
          "data": {
            "text/plain": "fwd    118\nrwd     75\n4wd      8\nName: drive-wheels, dtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can convert the series to a dataframe as follows:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df['drive-wheels'].value_counts().to_frame()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 33,
      "outputs": [
        {
          "execution_count": 33,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     drive-wheels\nfwd           118\nrwd            75\n4wd             8",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drive-wheels</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>fwd</th>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>4wd</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Let's repeat the above steps but save the results to the dataframe \"drive_wheels_counts\" and rename the column  'drive-wheels' to 'value_counts'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "drive_wheels_counts = df['drive-wheels'].value_counts().to_frame()\ndrive_wheels_counts.rename(columns={'drive-wheels': 'value_counts'}, inplace=True)\ndrive_wheels_counts",
      "metadata": {
        "trusted": true
      },
      "execution_count": 34,
      "outputs": [
        {
          "execution_count": 34,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     value_counts\nfwd           118\nrwd            75\n4wd             8",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>value_counts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>fwd</th>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>4wd</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Now let's rename the index to 'drive-wheels':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "drive_wheels_counts.index.name = 'drive-wheels'\ndrive_wheels_counts",
      "metadata": {
        "trusted": true
      },
      "execution_count": 35,
      "outputs": [
        {
          "execution_count": 35,
          "output_type": "execute_result",
          "data": {
            "text/plain": "              value_counts\ndrive-wheels              \nfwd                    118\nrwd                     75\n4wd                      8",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>value_counts</th>\n    </tr>\n    <tr>\n      <th>drive-wheels</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>fwd</th>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>4wd</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can repeat the above process for the variable 'engine-location'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# engine-location as variable\nengine_loc_counts = df['engine-location'].value_counts().to_frame()\nengine_loc_counts.rename(columns={'engine-location': 'value_counts'}, inplace=True)\nengine_loc_counts.index.name = 'engine-location'\nengine_loc_counts.head(10)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 36,
      "outputs": [
        {
          "execution_count": 36,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                 value_counts\nengine-location              \nfront                     198\nrear                        3",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>value_counts</th>\n    </tr>\n    <tr>\n      <th>engine-location</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>front</th>\n      <td>198</td>\n    </tr>\n    <tr>\n      <th>rear</th>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>After examining the value counts of the engine location, we see that engine location would not be a good predictor variable for the price. This is because we only have three cars with a rear engine and 198 with an engine in the front, so this result is skewed. Thus, we are not able to draw any conclusions about the engine location.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"basic_grouping\">4. Basics of Grouping</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>The \"groupby\" method groups data by different categories. The data is grouped based on one or several variables, and analysis is performed on the individual groups.</p>\n\n<p>For example, let's group by the variable \"drive-wheels\". We see that there are 3 different categories of drive wheels.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df['drive-wheels'].unique()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 37,
      "outputs": [
        {
          "execution_count": 37,
          "output_type": "execute_result",
          "data": {
            "text/plain": "array(['rwd', 'fwd', '4wd'], dtype=object)"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>If we want to know, on average, which type of drive wheel is most valuable, we can group \"drive-wheels\" and then average them.</p>\n\n<p>We can select the columns 'drive-wheels', 'body-style' and 'price', then assign it to the variable \"df_group_one\".</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df_group_one = df[['drive-wheels','body-style','price']]",
      "metadata": {
        "trusted": true
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We can then calculate the average price for each of the different categories of data.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# grouping results\ndf_group_one = df_group_one.groupby(['drive-wheels'],as_index=False).mean()\ndf_group_one",
      "metadata": {
        "trusted": true
      },
      "execution_count": 39,
      "outputs": [
        {
          "execution_count": 39,
          "output_type": "execute_result",
          "data": {
            "text/plain": "  drive-wheels         price\n0          4wd  10241.000000\n1          fwd   9244.779661\n2          rwd  19757.613333",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drive-wheels</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4wd</td>\n      <td>10241.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>fwd</td>\n      <td>9244.779661</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>rwd</td>\n      <td>19757.613333</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>From our data, it seems rear-wheel drive vehicles are, on average, the most expensive, while 4-wheel and front-wheel are approximately the same in price.</p>\n\n<p>You can also group by multiple variables. For example, let's group by both 'drive-wheels' and 'body-style'. This groups the dataframe by the unique combination of 'drive-wheels' and 'body-style'. We can store the results in the variable 'grouped_test1'.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# grouping results\ndf_gptest = df[['drive-wheels','body-style','price']]\ngrouped_test1 = df_gptest.groupby(['drive-wheels','body-style'],as_index=False).mean()\ngrouped_test1",
      "metadata": {
        "trusted": true
      },
      "execution_count": 40,
      "outputs": [
        {
          "execution_count": 40,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   drive-wheels   body-style         price\n0           4wd    hatchback   7603.000000\n1           4wd        sedan  12647.333333\n2           4wd        wagon   9095.750000\n3           fwd  convertible  11595.000000\n4           fwd      hardtop   8249.000000\n5           fwd    hatchback   8396.387755\n6           fwd        sedan   9811.800000\n7           fwd        wagon   9997.333333\n8           rwd  convertible  23949.600000\n9           rwd      hardtop  24202.714286\n10          rwd    hatchback  14337.777778\n11          rwd        sedan  21711.833333\n12          rwd        wagon  16994.222222",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drive-wheels</th>\n      <th>body-style</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4wd</td>\n      <td>hatchback</td>\n      <td>7603.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4wd</td>\n      <td>sedan</td>\n      <td>12647.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4wd</td>\n      <td>wagon</td>\n      <td>9095.750000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>fwd</td>\n      <td>convertible</td>\n      <td>11595.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>fwd</td>\n      <td>hardtop</td>\n      <td>8249.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>fwd</td>\n      <td>hatchback</td>\n      <td>8396.387755</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>fwd</td>\n      <td>sedan</td>\n      <td>9811.800000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>fwd</td>\n      <td>wagon</td>\n      <td>9997.333333</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>rwd</td>\n      <td>convertible</td>\n      <td>23949.600000</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>rwd</td>\n      <td>hardtop</td>\n      <td>24202.714286</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>rwd</td>\n      <td>hatchback</td>\n      <td>14337.777778</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>rwd</td>\n      <td>sedan</td>\n      <td>21711.833333</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>rwd</td>\n      <td>wagon</td>\n      <td>16994.222222</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>This grouped data is much easier to visualize when it is made into a pivot table. A pivot table is like an Excel spreadsheet, with one variable along the column and another along the row. We can convert the dataframe to a pivot table using the method \"pivot\" to create a pivot table from the groups.</p>\n\n<p>In this case, we will leave the drive-wheels variable as the rows of the table, and pivot body-style to become the columns of the table:</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "grouped_pivot = grouped_test1.pivot(index='drive-wheels',columns='body-style')\ngrouped_pivot",
      "metadata": {
        "trusted": true
      },
      "execution_count": 41,
      "outputs": [
        {
          "execution_count": 41,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                   price                                            \\\nbody-style   convertible       hardtop     hatchback         sedan   \ndrive-wheels                                                         \n4wd                  NaN           NaN   7603.000000  12647.333333   \nfwd              11595.0   8249.000000   8396.387755   9811.800000   \nrwd              23949.6  24202.714286  14337.777778  21711.833333   \n\n                            \nbody-style           wagon  \ndrive-wheels                \n4wd            9095.750000  \nfwd            9997.333333  \nrwd           16994.222222  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"5\" halign=\"left\">price</th>\n    </tr>\n    <tr>\n      <th>body-style</th>\n      <th>convertible</th>\n      <th>hardtop</th>\n      <th>hatchback</th>\n      <th>sedan</th>\n      <th>wagon</th>\n    </tr>\n    <tr>\n      <th>drive-wheels</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4wd</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>7603.000000</td>\n      <td>12647.333333</td>\n      <td>9095.750000</td>\n    </tr>\n    <tr>\n      <th>fwd</th>\n      <td>11595.0</td>\n      <td>8249.000000</td>\n      <td>8396.387755</td>\n      <td>9811.800000</td>\n      <td>9997.333333</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>23949.6</td>\n      <td>24202.714286</td>\n      <td>14337.777778</td>\n      <td>21711.833333</td>\n      <td>16994.222222</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Often, we won't have data for some of the pivot cells. We can fill these missing cells with the value 0, but any other value could potentially be used as well. It should be mentioned that missing data is quite a complex subject and is an entire course on its own.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "grouped_pivot = grouped_pivot.fillna(0) #fill missing values with 0\ngrouped_pivot",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 42,
      "outputs": [
        {
          "execution_count": 42,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                   price                                            \\\nbody-style   convertible       hardtop     hatchback         sedan   \ndrive-wheels                                                         \n4wd                  0.0      0.000000   7603.000000  12647.333333   \nfwd              11595.0   8249.000000   8396.387755   9811.800000   \nrwd              23949.6  24202.714286  14337.777778  21711.833333   \n\n                            \nbody-style           wagon  \ndrive-wheels                \n4wd            9095.750000  \nfwd            9997.333333  \nrwd           16994.222222  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"5\" halign=\"left\">price</th>\n    </tr>\n    <tr>\n      <th>body-style</th>\n      <th>convertible</th>\n      <th>hardtop</th>\n      <th>hatchback</th>\n      <th>sedan</th>\n      <th>wagon</th>\n    </tr>\n    <tr>\n      <th>drive-wheels</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4wd</th>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>7603.000000</td>\n      <td>12647.333333</td>\n      <td>9095.750000</td>\n    </tr>\n    <tr>\n      <th>fwd</th>\n      <td>11595.0</td>\n      <td>8249.000000</td>\n      <td>8396.387755</td>\n      <td>9811.800000</td>\n      <td>9997.333333</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>23949.6</td>\n      <td>24202.714286</td>\n      <td>14337.777778</td>\n      <td>21711.833333</td>\n      <td>16994.222222</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1>Question 4:</h1>\n\n<p>Use the \"groupby\" function to find the average \"price\" of each car based on \"body-style\".</p>\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute \n# grouping results\ndf_gptest2 = df[['body-style','price']]\ngrouped_test_bodystyle = df_gptest2.groupby(['body-style'],as_index= False).mean()\ngrouped_test_bodystyle",
      "metadata": {
        "trusted": true
      },
      "execution_count": 45,
      "outputs": [
        {
          "execution_count": 45,
          "output_type": "execute_result",
          "data": {
            "text/plain": "    body-style         price\n0  convertible  21890.500000\n1      hardtop  22208.500000\n2    hatchback   9957.441176\n3        sedan  14459.755319\n4        wagon  12371.960000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>body-style</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>convertible</td>\n      <td>21890.500000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>hardtop</td>\n      <td>22208.500000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>hatchback</td>\n      <td>9957.441176</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>sedan</td>\n      <td>14459.755319</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>wagon</td>\n      <td>12371.960000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\n# grouping results\ndf_gptest2 = df[['body-style','price']]\ngrouped_test_bodystyle = df_gptest2.groupby(['body-style'],as_index= False).mean()\ngrouped_test_bodystyle\n\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "If you did not import \"pyplot\", let's do it again.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\n%matplotlib inline ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Variables: Drive Wheels and Body Style vs. Price</h4>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's use a heat map to visualize the relationship between Body Style vs Price.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#use the grouped results\nplt.pcolor(grouped_pivot, cmap='RdBu')\nplt.colorbar()\nplt.show()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<pyolite.display.Image at 0x7169a98>",
            "image/png": ""
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 0 Axes>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>The heatmap plots the target variable (price) proportional to colour with respect to the variables 'drive-wheel' and 'body-style' on the vertical and horizontal axis, respectively. This allows us to visualize how the price is related to 'drive-wheel' and 'body-style'.</p>\n\n<p>The default labels convey no useful information to us. Let's change that:</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "fig, ax = plt.subplots()\nim = ax.pcolor(grouped_pivot, cmap='RdBu')\n\n#label names\nrow_labels = grouped_pivot.columns.levels[1]\ncol_labels = grouped_pivot.index\n\n#move ticks and labels to the center\nax.set_xticks(np.arange(grouped_pivot.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(grouped_pivot.shape[0]) + 0.5, minor=False)\n\n#insert labels\nax.set_xticklabels(row_labels, minor=False)\nax.set_yticklabels(col_labels, minor=False)\n\n#rotate label if too long\nplt.xticks(rotation=90)\n\nfig.colorbar(im)\nplt.show()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<pyolite.display.Image at 0x756cd78>",
            "image/png": ""
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 0 Axes>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Visualization is very important in data science, and Python visualization packages provide great freedom. We will go more in-depth in a separate Python visualizations course.</p>\n\n<p>The main question we want to answer in this module is, \"What are the main characteristics which have the most impact on the car price?\".</p>\n\n<p>To get a better measure of the important characteristics, we look at the correlation of these variables with the car price. In other words: how is the car price dependent on this variable?</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"correlation_causation\">5. Correlation and Causation</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p><b>Correlation</b>: a measure of the extent of interdependence between variables.</p>\n\n<p><b>Causation</b>: the relationship between cause and effect between two variables.</p>\n\n<p>It is important to know the difference between these two. Correlation does not imply causation. Determining correlation is much simpler  the determining causation as causation may require independent experimentation.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p><b>Pearson Correlation</b></p>\n<p>The Pearson Correlation measures the linear dependence between two variables X and Y.</p>\n<p>The resulting coefficient is a value between -1 and 1 inclusive, where:</p>\n<ul>\n    <li><b>1</b>: Perfect positive linear correlation.</li>\n    <li><b>0</b>: No linear correlation, the two variables most likely do not affect each other.</li>\n    <li><b>-1</b>: Perfect negative linear correlation.</li>\n</ul>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>Pearson Correlation is the default method of the function \"corr\". Like before, we can calculate the Pearson Correlation of the of the 'int64' or 'float64'  variables.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 49,
      "outputs": [
        {
          "execution_count": 49,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                   symboling  normalized-losses  wheel-base    length  \\\nsymboling           1.000000           0.466264   -0.535987 -0.365404   \nnormalized-losses   0.466264           1.000000   -0.056661  0.019424   \nwheel-base         -0.535987          -0.056661    1.000000  0.876024   \nlength             -0.365404           0.019424    0.876024  1.000000   \nwidth              -0.242423           0.086802    0.814507  0.857170   \nheight             -0.550160          -0.373737    0.590742  0.492063   \ncurb-weight        -0.233118           0.099404    0.782097  0.880665   \nengine-size        -0.110581           0.112360    0.572027  0.685025   \nbore               -0.140019          -0.029862    0.493244  0.608971   \nstroke             -0.008245           0.055563    0.158502  0.124139   \ncompression-ratio  -0.182196          -0.114713    0.250313  0.159733   \nhorsepower          0.075819           0.217299    0.371147  0.579821   \npeak-rpm            0.279740           0.239543   -0.360305 -0.285970   \ncity-mpg           -0.035527          -0.225016   -0.470606 -0.665192   \nhighway-mpg         0.036233          -0.181877   -0.543304 -0.698142   \nprice              -0.082391           0.133999    0.584642  0.690628   \ncity-L/100km        0.066171           0.238567    0.476153  0.657373   \ndiesel             -0.196735          -0.101546    0.307237  0.211187   \ngas                 0.196735           0.101546   -0.307237 -0.211187   \n\n                      width    height  curb-weight  engine-size      bore  \\\nsymboling         -0.242423 -0.550160    -0.233118    -0.110581 -0.140019   \nnormalized-losses  0.086802 -0.373737     0.099404     0.112360 -0.029862   \nwheel-base         0.814507  0.590742     0.782097     0.572027  0.493244   \nlength             0.857170  0.492063     0.880665     0.685025  0.608971   \nwidth              1.000000  0.306002     0.866201     0.729436  0.544885   \nheight             0.306002  1.000000     0.307581     0.074694  0.180449   \ncurb-weight        0.866201  0.307581     1.000000     0.849072  0.644060   \nengine-size        0.729436  0.074694     0.849072     1.000000  0.572609   \nbore               0.544885  0.180449     0.644060     0.572609  1.000000   \nstroke             0.188829 -0.062704     0.167562     0.209523 -0.055390   \ncompression-ratio  0.189867  0.259737     0.156433     0.028889  0.001263   \nhorsepower         0.615077 -0.087027     0.757976     0.822676  0.566936   \npeak-rpm          -0.245800 -0.309974    -0.279361    -0.256733 -0.267392   \ncity-mpg          -0.633531 -0.049800    -0.749543    -0.650546 -0.582027   \nhighway-mpg       -0.680635 -0.104812    -0.794889    -0.679571 -0.591309   \nprice              0.751265  0.135486     0.834415     0.872335  0.543155   \ncity-L/100km       0.673363  0.003811     0.785353     0.745059  0.554610   \ndiesel             0.244356  0.281578     0.221046     0.070779  0.054458   \ngas               -0.244356 -0.281578    -0.221046    -0.070779 -0.054458   \n\n                     stroke  compression-ratio  horsepower  peak-rpm  \\\nsymboling         -0.008245          -0.182196    0.075819  0.279740   \nnormalized-losses  0.055563          -0.114713    0.217299  0.239543   \nwheel-base         0.158502           0.250313    0.371147 -0.360305   \nlength             0.124139           0.159733    0.579821 -0.285970   \nwidth              0.188829           0.189867    0.615077 -0.245800   \nheight            -0.062704           0.259737   -0.087027 -0.309974   \ncurb-weight        0.167562           0.156433    0.757976 -0.279361   \nengine-size        0.209523           0.028889    0.822676 -0.256733   \nbore              -0.055390           0.001263    0.566936 -0.267392   \nstroke             1.000000           0.187923    0.098462 -0.065713   \ncompression-ratio  0.187923           1.000000   -0.214514 -0.435780   \nhorsepower         0.098462          -0.214514    1.000000  0.107885   \npeak-rpm          -0.065713          -0.435780    0.107885  1.000000   \ncity-mpg          -0.034696           0.331425   -0.822214 -0.115413   \nhighway-mpg       -0.035201           0.268465   -0.804575 -0.058598   \nprice              0.082310           0.071107    0.809575 -0.101616   \ncity-L/100km       0.037300          -0.299372    0.889488  0.115830   \ndiesel             0.241303           0.985231   -0.169053 -0.475812   \ngas               -0.241303          -0.985231    0.169053  0.475812   \n\n                   city-mpg  highway-mpg     price  city-L/100km    diesel  \\\nsymboling         -0.035527     0.036233 -0.082391      0.066171 -0.196735   \nnormalized-losses -0.225016    -0.181877  0.133999      0.238567 -0.101546   \nwheel-base        -0.470606    -0.543304  0.584642      0.476153  0.307237   \nlength            -0.665192    -0.698142  0.690628      0.657373  0.211187   \nwidth             -0.633531    -0.680635  0.751265      0.673363  0.244356   \nheight            -0.049800    -0.104812  0.135486      0.003811  0.281578   \ncurb-weight       -0.749543    -0.794889  0.834415      0.785353  0.221046   \nengine-size       -0.650546    -0.679571  0.872335      0.745059  0.070779   \nbore              -0.582027    -0.591309  0.543155      0.554610  0.054458   \nstroke            -0.034696    -0.035201  0.082310      0.037300  0.241303   \ncompression-ratio  0.331425     0.268465  0.071107     -0.299372  0.985231   \nhorsepower        -0.822214    -0.804575  0.809575      0.889488 -0.169053   \npeak-rpm          -0.115413    -0.058598 -0.101616      0.115830 -0.475812   \ncity-mpg           1.000000     0.972044 -0.686571     -0.949713  0.265676   \nhighway-mpg        0.972044     1.000000 -0.704692     -0.930028  0.198690   \nprice             -0.686571    -0.704692  1.000000      0.789898  0.110326   \ncity-L/100km      -0.949713    -0.930028  0.789898      1.000000 -0.241282   \ndiesel             0.265676     0.198690  0.110326     -0.241282  1.000000   \ngas               -0.265676    -0.198690 -0.110326      0.241282 -1.000000   \n\n                        gas  \nsymboling          0.196735  \nnormalized-losses  0.101546  \nwheel-base        -0.307237  \nlength            -0.211187  \nwidth             -0.244356  \nheight            -0.281578  \ncurb-weight       -0.221046  \nengine-size       -0.070779  \nbore              -0.054458  \nstroke            -0.241303  \ncompression-ratio -0.985231  \nhorsepower         0.169053  \npeak-rpm           0.475812  \ncity-mpg          -0.265676  \nhighway-mpg       -0.198690  \nprice             -0.110326  \ncity-L/100km       0.241282  \ndiesel            -1.000000  \ngas                1.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n      <th>city-L/100km</th>\n      <th>diesel</th>\n      <th>gas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>symboling</th>\n      <td>1.000000</td>\n      <td>0.466264</td>\n      <td>-0.535987</td>\n      <td>-0.365404</td>\n      <td>-0.242423</td>\n      <td>-0.550160</td>\n      <td>-0.233118</td>\n      <td>-0.110581</td>\n      <td>-0.140019</td>\n      <td>-0.008245</td>\n      <td>-0.182196</td>\n      <td>0.075819</td>\n      <td>0.279740</td>\n      <td>-0.035527</td>\n      <td>0.036233</td>\n      <td>-0.082391</td>\n      <td>0.066171</td>\n      <td>-0.196735</td>\n      <td>0.196735</td>\n    </tr>\n    <tr>\n      <th>normalized-losses</th>\n      <td>0.466264</td>\n      <td>1.000000</td>\n      <td>-0.056661</td>\n      <td>0.019424</td>\n      <td>0.086802</td>\n      <td>-0.373737</td>\n      <td>0.099404</td>\n      <td>0.112360</td>\n      <td>-0.029862</td>\n      <td>0.055563</td>\n      <td>-0.114713</td>\n      <td>0.217299</td>\n      <td>0.239543</td>\n      <td>-0.225016</td>\n      <td>-0.181877</td>\n      <td>0.133999</td>\n      <td>0.238567</td>\n      <td>-0.101546</td>\n      <td>0.101546</td>\n    </tr>\n    <tr>\n      <th>wheel-base</th>\n      <td>-0.535987</td>\n      <td>-0.056661</td>\n      <td>1.000000</td>\n      <td>0.876024</td>\n      <td>0.814507</td>\n      <td>0.590742</td>\n      <td>0.782097</td>\n      <td>0.572027</td>\n      <td>0.493244</td>\n      <td>0.158502</td>\n      <td>0.250313</td>\n      <td>0.371147</td>\n      <td>-0.360305</td>\n      <td>-0.470606</td>\n      <td>-0.543304</td>\n      <td>0.584642</td>\n      <td>0.476153</td>\n      <td>0.307237</td>\n      <td>-0.307237</td>\n    </tr>\n    <tr>\n      <th>length</th>\n      <td>-0.365404</td>\n      <td>0.019424</td>\n      <td>0.876024</td>\n      <td>1.000000</td>\n      <td>0.857170</td>\n      <td>0.492063</td>\n      <td>0.880665</td>\n      <td>0.685025</td>\n      <td>0.608971</td>\n      <td>0.124139</td>\n      <td>0.159733</td>\n      <td>0.579821</td>\n      <td>-0.285970</td>\n      <td>-0.665192</td>\n      <td>-0.698142</td>\n      <td>0.690628</td>\n      <td>0.657373</td>\n      <td>0.211187</td>\n      <td>-0.211187</td>\n    </tr>\n    <tr>\n      <th>width</th>\n      <td>-0.242423</td>\n      <td>0.086802</td>\n      <td>0.814507</td>\n      <td>0.857170</td>\n      <td>1.000000</td>\n      <td>0.306002</td>\n      <td>0.866201</td>\n      <td>0.729436</td>\n      <td>0.544885</td>\n      <td>0.188829</td>\n      <td>0.189867</td>\n      <td>0.615077</td>\n      <td>-0.245800</td>\n      <td>-0.633531</td>\n      <td>-0.680635</td>\n      <td>0.751265</td>\n      <td>0.673363</td>\n      <td>0.244356</td>\n      <td>-0.244356</td>\n    </tr>\n    <tr>\n      <th>height</th>\n      <td>-0.550160</td>\n      <td>-0.373737</td>\n      <td>0.590742</td>\n      <td>0.492063</td>\n      <td>0.306002</td>\n      <td>1.000000</td>\n      <td>0.307581</td>\n      <td>0.074694</td>\n      <td>0.180449</td>\n      <td>-0.062704</td>\n      <td>0.259737</td>\n      <td>-0.087027</td>\n      <td>-0.309974</td>\n      <td>-0.049800</td>\n      <td>-0.104812</td>\n      <td>0.135486</td>\n      <td>0.003811</td>\n      <td>0.281578</td>\n      <td>-0.281578</td>\n    </tr>\n    <tr>\n      <th>curb-weight</th>\n      <td>-0.233118</td>\n      <td>0.099404</td>\n      <td>0.782097</td>\n      <td>0.880665</td>\n      <td>0.866201</td>\n      <td>0.307581</td>\n      <td>1.000000</td>\n      <td>0.849072</td>\n      <td>0.644060</td>\n      <td>0.167562</td>\n      <td>0.156433</td>\n      <td>0.757976</td>\n      <td>-0.279361</td>\n      <td>-0.749543</td>\n      <td>-0.794889</td>\n      <td>0.834415</td>\n      <td>0.785353</td>\n      <td>0.221046</td>\n      <td>-0.221046</td>\n    </tr>\n    <tr>\n      <th>engine-size</th>\n      <td>-0.110581</td>\n      <td>0.112360</td>\n      <td>0.572027</td>\n      <td>0.685025</td>\n      <td>0.729436</td>\n      <td>0.074694</td>\n      <td>0.849072</td>\n      <td>1.000000</td>\n      <td>0.572609</td>\n      <td>0.209523</td>\n      <td>0.028889</td>\n      <td>0.822676</td>\n      <td>-0.256733</td>\n      <td>-0.650546</td>\n      <td>-0.679571</td>\n      <td>0.872335</td>\n      <td>0.745059</td>\n      <td>0.070779</td>\n      <td>-0.070779</td>\n    </tr>\n    <tr>\n      <th>bore</th>\n      <td>-0.140019</td>\n      <td>-0.029862</td>\n      <td>0.493244</td>\n      <td>0.608971</td>\n      <td>0.544885</td>\n      <td>0.180449</td>\n      <td>0.644060</td>\n      <td>0.572609</td>\n      <td>1.000000</td>\n      <td>-0.055390</td>\n      <td>0.001263</td>\n      <td>0.566936</td>\n      <td>-0.267392</td>\n      <td>-0.582027</td>\n      <td>-0.591309</td>\n      <td>0.543155</td>\n      <td>0.554610</td>\n      <td>0.054458</td>\n      <td>-0.054458</td>\n    </tr>\n    <tr>\n      <th>stroke</th>\n      <td>-0.008245</td>\n      <td>0.055563</td>\n      <td>0.158502</td>\n      <td>0.124139</td>\n      <td>0.188829</td>\n      <td>-0.062704</td>\n      <td>0.167562</td>\n      <td>0.209523</td>\n      <td>-0.055390</td>\n      <td>1.000000</td>\n      <td>0.187923</td>\n      <td>0.098462</td>\n      <td>-0.065713</td>\n      <td>-0.034696</td>\n      <td>-0.035201</td>\n      <td>0.082310</td>\n      <td>0.037300</td>\n      <td>0.241303</td>\n      <td>-0.241303</td>\n    </tr>\n    <tr>\n      <th>compression-ratio</th>\n      <td>-0.182196</td>\n      <td>-0.114713</td>\n      <td>0.250313</td>\n      <td>0.159733</td>\n      <td>0.189867</td>\n      <td>0.259737</td>\n      <td>0.156433</td>\n      <td>0.028889</td>\n      <td>0.001263</td>\n      <td>0.187923</td>\n      <td>1.000000</td>\n      <td>-0.214514</td>\n      <td>-0.435780</td>\n      <td>0.331425</td>\n      <td>0.268465</td>\n      <td>0.071107</td>\n      <td>-0.299372</td>\n      <td>0.985231</td>\n      <td>-0.985231</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>0.075819</td>\n      <td>0.217299</td>\n      <td>0.371147</td>\n      <td>0.579821</td>\n      <td>0.615077</td>\n      <td>-0.087027</td>\n      <td>0.757976</td>\n      <td>0.822676</td>\n      <td>0.566936</td>\n      <td>0.098462</td>\n      <td>-0.214514</td>\n      <td>1.000000</td>\n      <td>0.107885</td>\n      <td>-0.822214</td>\n      <td>-0.804575</td>\n      <td>0.809575</td>\n      <td>0.889488</td>\n      <td>-0.169053</td>\n      <td>0.169053</td>\n    </tr>\n    <tr>\n      <th>peak-rpm</th>\n      <td>0.279740</td>\n      <td>0.239543</td>\n      <td>-0.360305</td>\n      <td>-0.285970</td>\n      <td>-0.245800</td>\n      <td>-0.309974</td>\n      <td>-0.279361</td>\n      <td>-0.256733</td>\n      <td>-0.267392</td>\n      <td>-0.065713</td>\n      <td>-0.435780</td>\n      <td>0.107885</td>\n      <td>1.000000</td>\n      <td>-0.115413</td>\n      <td>-0.058598</td>\n      <td>-0.101616</td>\n      <td>0.115830</td>\n      <td>-0.475812</td>\n      <td>0.475812</td>\n    </tr>\n    <tr>\n      <th>city-mpg</th>\n      <td>-0.035527</td>\n      <td>-0.225016</td>\n      <td>-0.470606</td>\n      <td>-0.665192</td>\n      <td>-0.633531</td>\n      <td>-0.049800</td>\n      <td>-0.749543</td>\n      <td>-0.650546</td>\n      <td>-0.582027</td>\n      <td>-0.034696</td>\n      <td>0.331425</td>\n      <td>-0.822214</td>\n      <td>-0.115413</td>\n      <td>1.000000</td>\n      <td>0.972044</td>\n      <td>-0.686571</td>\n      <td>-0.949713</td>\n      <td>0.265676</td>\n      <td>-0.265676</td>\n    </tr>\n    <tr>\n      <th>highway-mpg</th>\n      <td>0.036233</td>\n      <td>-0.181877</td>\n      <td>-0.543304</td>\n      <td>-0.698142</td>\n      <td>-0.680635</td>\n      <td>-0.104812</td>\n      <td>-0.794889</td>\n      <td>-0.679571</td>\n      <td>-0.591309</td>\n      <td>-0.035201</td>\n      <td>0.268465</td>\n      <td>-0.804575</td>\n      <td>-0.058598</td>\n      <td>0.972044</td>\n      <td>1.000000</td>\n      <td>-0.704692</td>\n      <td>-0.930028</td>\n      <td>0.198690</td>\n      <td>-0.198690</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>-0.082391</td>\n      <td>0.133999</td>\n      <td>0.584642</td>\n      <td>0.690628</td>\n      <td>0.751265</td>\n      <td>0.135486</td>\n      <td>0.834415</td>\n      <td>0.872335</td>\n      <td>0.543155</td>\n      <td>0.082310</td>\n      <td>0.071107</td>\n      <td>0.809575</td>\n      <td>-0.101616</td>\n      <td>-0.686571</td>\n      <td>-0.704692</td>\n      <td>1.000000</td>\n      <td>0.789898</td>\n      <td>0.110326</td>\n      <td>-0.110326</td>\n    </tr>\n    <tr>\n      <th>city-L/100km</th>\n      <td>0.066171</td>\n      <td>0.238567</td>\n      <td>0.476153</td>\n      <td>0.657373</td>\n      <td>0.673363</td>\n      <td>0.003811</td>\n      <td>0.785353</td>\n      <td>0.745059</td>\n      <td>0.554610</td>\n      <td>0.037300</td>\n      <td>-0.299372</td>\n      <td>0.889488</td>\n      <td>0.115830</td>\n      <td>-0.949713</td>\n      <td>-0.930028</td>\n      <td>0.789898</td>\n      <td>1.000000</td>\n      <td>-0.241282</td>\n      <td>0.241282</td>\n    </tr>\n    <tr>\n      <th>diesel</th>\n      <td>-0.196735</td>\n      <td>-0.101546</td>\n      <td>0.307237</td>\n      <td>0.211187</td>\n      <td>0.244356</td>\n      <td>0.281578</td>\n      <td>0.221046</td>\n      <td>0.070779</td>\n      <td>0.054458</td>\n      <td>0.241303</td>\n      <td>0.985231</td>\n      <td>-0.169053</td>\n      <td>-0.475812</td>\n      <td>0.265676</td>\n      <td>0.198690</td>\n      <td>0.110326</td>\n      <td>-0.241282</td>\n      <td>1.000000</td>\n      <td>-1.000000</td>\n    </tr>\n    <tr>\n      <th>gas</th>\n      <td>0.196735</td>\n      <td>0.101546</td>\n      <td>-0.307237</td>\n      <td>-0.211187</td>\n      <td>-0.244356</td>\n      <td>-0.281578</td>\n      <td>-0.221046</td>\n      <td>-0.070779</td>\n      <td>-0.054458</td>\n      <td>-0.241303</td>\n      <td>-0.985231</td>\n      <td>0.169053</td>\n      <td>0.475812</td>\n      <td>-0.265676</td>\n      <td>-0.198690</td>\n      <td>-0.110326</td>\n      <td>0.241282</td>\n      <td>-1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Sometimes we would like to know the significant of the correlation estimate.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<b>P-value</b>\n\n<p>What is this P-value? The P-value is the probability value that the correlation between these two variables is statistically significant. Normally, we choose a significance level of 0.05, which means that we are 95% confident that the correlation between the variables is significant.</p>\n\nBy convention, when the\n\n<ul>\n    <li>p-value is $<$ 0.001: we say there is strong evidence that the correlation is significant.</li>\n    <li>the p-value is $<$ 0.05: there is moderate evidence that the correlation is significant.</li>\n    <li>the p-value is $<$ 0.1: there is weak evidence that the correlation is significant.</li>\n    <li>the p-value is $>$ 0.1: there is no evidence that the correlation is significant.</li>\n</ul>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can obtain this information using  \"stats\" module in the \"scipy\"  library.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from scipy import stats",
      "metadata": {
        "trusted": true
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Wheel-Base vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the  Pearson Correlation Coefficient and P-value of 'wheel-base' and 'price'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['wheel-base'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 51,
      "outputs": [
        {
          "name": "stdout",
          "text": "The Pearson Correlation Coefficient is 0.5846418222655085  with a P-value of P = 8.076488270732243e-20\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between wheel-base and price is statistically significant, although the linear relationship isn't extremely strong (~0.585).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Horsepower vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the  Pearson Correlation Coefficient and P-value of 'horsepower' and 'price'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['horsepower'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 52,
      "outputs": [
        {
          "name": "stdout",
          "text": "The Pearson Correlation Coefficient is 0.8095745670036559  with a P-value of P =  6.369057428260101e-48\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n\n<p>Since the p-value is $<$ 0.001, the correlation between horsepower and price is statistically significant, and the linear relationship is quite strong (~0.809, close to 1).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Length vs. Price</h3>\n\nLet's calculate the  Pearson Correlation Coefficient and P-value of 'length' and 'price'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['length'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 53,
      "outputs": [
        {
          "name": "stdout",
          "text": "The Pearson Correlation Coefficient is 0.6906283804483643  with a P-value of P =  8.01647746615853e-30\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between length and price is statistically significant, and the linear relationship is moderately strong (~0.691).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Width vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the Pearson Correlation Coefficient and P-value of 'width' and 'price':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['width'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value ) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 54,
      "outputs": [
        {
          "name": "stdout",
          "text": "The Pearson Correlation Coefficient is 0.7512653440522666  with a P-value of P = 9.200335510483739e-38\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "#### Conclusion:\n\nSince the p-value is < 0.001, the correlation between width and price is statistically significant, and the linear relationship is quite strong (\\~0.751).\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Curb-Weight vs. Price\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the Pearson Correlation Coefficient and P-value of 'curb-weight' and 'price':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['curb-weight'], df['price'])\nprint( \"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 55,
      "outputs": [
        {
          "name": "stdout",
          "text": "The Pearson Correlation Coefficient is 0.8344145257702845  with a P-value of P =  2.189577238893816e-53\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between curb-weight and price is statistically significant, and the linear relationship is quite strong (~0.834).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Engine-Size vs. Price</h3>\n\nLet's calculate the Pearson Correlation Coefficient and P-value of 'engine-size' and 'price':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['engine-size'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 56,
      "outputs": [
        {
          "name": "stdout",
          "text": "The Pearson Correlation Coefficient is 0.8723351674455188  with a P-value of P = 9.265491622196808e-64\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n\n<p>Since the p-value is $<$ 0.001, the correlation between engine-size and price is statistically significant, and the linear relationship is very strong (~0.872).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Bore vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the  Pearson Correlation Coefficient and P-value of 'bore' and 'price':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['bore'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =  \", p_value ) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 57,
      "outputs": [
        {
          "name": "stdout",
          "text": "The Pearson Correlation Coefficient is 0.54315538326266  with a P-value of P =   8.049189483935489e-17\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between bore and price is statistically significant, but the linear relationship is only moderate (~0.521).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can relate the process for each 'city-mpg'  and 'highway-mpg':\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>City-mpg vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['city-mpg'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 59,
      "outputs": [
        {
          "name": "stdout",
          "text": "The Pearson Correlation Coefficient is -0.6865710067844684  with a P-value of P =  2.3211320655672453e-29\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between city-mpg and price is statistically significant, and the coefficient of about -0.687 shows that the relationship is negative and moderately strong.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Highway-mpg vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['highway-mpg'], df['price'])\nprint( \"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value ) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 60,
      "outputs": [
        {
          "name": "stdout",
          "text": "The Pearson Correlation Coefficient is -0.7046922650589534  with a P-value of P =  1.749547114447437e-31\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "#### Conclusion:\n\nSince the p-value is < 0.001, the correlation between highway-mpg and price is statistically significant, and the coefficient of about -0.705 shows that the relationship is negative and moderately strong.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"anova\">6. ANOVA</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>ANOVA: Analysis of Variance</h3>\n<p>The Analysis of Variance  (ANOVA) is a statistical method used to test whether there are significant differences between the means of two or more groups. ANOVA returns two parameters:</p>\n\n<p><b>F-test score</b>: ANOVA assumes the means of all groups are the same, calculates how much the actual means deviate from the assumption, and reports it as the F-test score. A larger score means there is a larger difference between the means.</p>\n\n<p><b>P-value</b>:  P-value tells how statistically significant our calculated score value is.</p>\n\n<p>If our price variable is strongly correlated with the variable we are analyzing, we expect ANOVA to return a sizeable F-test score and a small p-value.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Drive Wheels</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>Since ANOVA analyzes the difference between different groups of the same variable, the groupby function will come in handy. Because the ANOVA algorithm averages the data automatically, we do not need to take the average before hand.</p>\n\n<p>To see if different types of 'drive-wheels' impact  'price', we group the data.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "grouped_test2=df_gptest[['drive-wheels', 'price']].groupby(['drive-wheels'])\ngrouped_test2.head(2)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 61,
      "outputs": [
        {
          "execution_count": 61,
          "output_type": "execute_result",
          "data": {
            "text/plain": "    drive-wheels    price\n0            rwd  13495.0\n1            rwd  16500.0\n3            fwd  13950.0\n4            4wd  17450.0\n5            fwd  15250.0\n136          4wd   7603.0",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drive-wheels</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>rwd</td>\n      <td>13495.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>rwd</td>\n      <td>16500.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>fwd</td>\n      <td>13950.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4wd</td>\n      <td>17450.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>fwd</td>\n      <td>15250.0</td>\n    </tr>\n    <tr>\n      <th>136</th>\n      <td>4wd</td>\n      <td>7603.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "df_gptest",
      "metadata": {
        "trusted": true
      },
      "execution_count": 62,
      "outputs": [
        {
          "execution_count": 62,
          "output_type": "execute_result",
          "data": {
            "text/plain": "    drive-wheels   body-style    price\n0            rwd  convertible  13495.0\n1            rwd  convertible  16500.0\n2            rwd    hatchback  16500.0\n3            fwd        sedan  13950.0\n4            4wd        sedan  17450.0\n..           ...          ...      ...\n196          rwd        sedan  16845.0\n197          rwd        sedan  19045.0\n198          rwd        sedan  21485.0\n199          rwd        sedan  22470.0\n200          rwd        sedan  22625.0\n\n[201 rows x 3 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drive-wheels</th>\n      <th>body-style</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>rwd</td>\n      <td>convertible</td>\n      <td>13495.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>rwd</td>\n      <td>convertible</td>\n      <td>16500.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>rwd</td>\n      <td>hatchback</td>\n      <td>16500.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>fwd</td>\n      <td>sedan</td>\n      <td>13950.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4wd</td>\n      <td>sedan</td>\n      <td>17450.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>196</th>\n      <td>rwd</td>\n      <td>sedan</td>\n      <td>16845.0</td>\n    </tr>\n    <tr>\n      <th>197</th>\n      <td>rwd</td>\n      <td>sedan</td>\n      <td>19045.0</td>\n    </tr>\n    <tr>\n      <th>198</th>\n      <td>rwd</td>\n      <td>sedan</td>\n      <td>21485.0</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>rwd</td>\n      <td>sedan</td>\n      <td>22470.0</td>\n    </tr>\n    <tr>\n      <th>200</th>\n      <td>rwd</td>\n      <td>sedan</td>\n      <td>22625.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>201 rows × 3 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can obtain the values of the method group using the method \"get_group\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "grouped_test2.get_group('4wd')['price']",
      "metadata": {
        "trusted": true
      },
      "execution_count": 63,
      "outputs": [
        {
          "execution_count": 63,
          "output_type": "execute_result",
          "data": {
            "text/plain": "4      17450.0\n136     7603.0\n140     9233.0\n141    11259.0\n144     8013.0\n145    11694.0\n150     7898.0\n151     8778.0\nName: price, dtype: float64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can use the function 'f_oneway' in the module 'stats' to obtain the <b>F-test score</b> and <b>P-value</b>.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# ANOVA\nf_val, p_val = stats.f_oneway(grouped_test2.get_group('fwd')['price'], grouped_test2.get_group('rwd')['price'], grouped_test2.get_group('4wd')['price'])  \n \nprint( \"ANOVA results: F=\", f_val, \", P =\", p_val)   ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 64,
      "outputs": [
        {
          "name": "stdout",
          "text": "ANOVA results: F= 67.95406500780399 , P = 3.3945443577151245e-23\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "This is a great result with a large F-test score showing a strong correlation and a P-value of almost 0 implying almost certain statistical significance. But does this mean all three tested groups are all this highly correlated?\n\nLet's examine them separately.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "#### fwd and rwd\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "f_val, p_val = stats.f_oneway(grouped_test2.get_group('fwd')['price'], grouped_test2.get_group('rwd')['price'])  \n \nprint( \"ANOVA results: F=\", f_val, \", P =\", p_val )",
      "metadata": {
        "trusted": true
      },
      "execution_count": 65,
      "outputs": [
        {
          "name": "stdout",
          "text": "ANOVA results: F= 130.5533160959111 , P = 2.2355306355677845e-23\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Let's examine the other groups.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "#### 4wd and rwd\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "f_val, p_val = stats.f_oneway(grouped_test2.get_group('4wd')['price'], grouped_test2.get_group('rwd')['price'])  \n   \nprint( \"ANOVA results: F=\", f_val, \", P =\", p_val)   ",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 66,
      "outputs": [
        {
          "name": "stdout",
          "text": "ANOVA results: F= 8.580681368924756 , P = 0.004411492211225333\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h4>4wd and fwd</h4>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "f_val, p_val = stats.f_oneway(grouped_test2.get_group('4wd')['price'], grouped_test2.get_group('fwd')['price'])  \n \nprint(\"ANOVA results: F=\", f_val, \", P =\", p_val)   ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 67,
      "outputs": [
        {
          "name": "stdout",
          "text": "ANOVA results: F= 0.665465750252303 , P = 0.41620116697845655\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Conclusion: Important Variables</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>We now have a better idea of what our data looks like and which variables are important to take into account when predicting the car price. We have narrowed it down to the following variables:</p>\n\nContinuous numerical variables:\n\n<ul>\n    <li>Length</li>\n    <li>Width</li>\n    <li>Curb-weight</li>\n    <li>Engine-size</li>\n    <li>Horsepower</li>\n    <li>City-mpg</li>\n    <li>Highway-mpg</li>\n    <li>Wheel-base</li>\n    <li>Bore</li>\n</ul>\n\nCategorical variables:\n\n<ul>\n    <li>Drive-wheels</li>\n</ul>\n\n<p>As we now move into building machine learning models to automate our analysis, feeding the model with variables that meaningfully affect our target variable will improve our model's prediction performance.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Thank you for completing this lab!\n\n## Author\n\n<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\" target=\"_blank\">Joseph Santarcangelo</a>\n\n### Other Contributors\n\n<a href=\"https://www.linkedin.com/in/mahdi-noorian-58219234/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\" target=\"_blank\">Mahdi Noorian PhD</a>\n\nBahare Talayian\n\nEric Xiao\n\nSteven Dong\n\nParizad\n\nHima Vasudevan\n\n<a href=\"https://www.linkedin.com/in/fiorellawever/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\" target=\"_blank\">Fiorella Wenver</a>\n\n<a href=\"https:// https://www.linkedin.com/in/yi-leng-yao-84451275/ \" target=\"_blank\" >Yi Yao</a>.\n\n## Change Log\n\n| Date (YYYY-MM-DD) | Version | Changed By | Change Description                 |\n| ----------------- | ------- | ---------- | ---------------------------------- |\n| 2020-10-30        | 2.1     | Lakshmi    | changed URL of csv                 |\n| 2020-08-27        | 2.0     | Lavanya    | Moved lab to course repo in GitLab |\n\n<hr>\n\n## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}